{"version":3,"file":"promisification.js","sources":["../src/js/promisification.js"],"sourcesContent":["//Промісифікація\n\n//Колбеки vs проміси\n\n//Промісифікація функцій\n\n/*\nconst fetchUserFromServer = (username, onSuccess, onError) => {\n  console.log(`Fetching data for ${username}`);\n\n  setTimeout(() => {\n    // Change value of isSuccess variable to simulate request status\n    // const isSuccess = false;\n    const isSuccess = true;\n\n    if (isSuccess) {\n      onSuccess('success value');\n    } else {\n      onError('error');\n    }\n  }, 2000);\n};\n\nfetchUserFromServer(\n  'Mango',\n  user => console.log(user),\n  error => console.error(error)\n);\n*/\n\n// ****************************\nconsole.log('***************');\n\n/*\nconst fetchUserFromServer1 = username => {\n  return new Promise((resolve, reject) => {\n    console.log(`Fetching data for ${username}`);\n\n    setTimeout(() => {\n      // Change value of isSuccess variable to simulate request status\n      const isSuccess = true;\n\n      if (isSuccess) {\n        resolve('success value'); // значенням параметра resolve буде колбек-функція методу then()\n      } else {\n        reject('error'); // значенням параметра reject буде колбек-функція методу catch()\n      }\n    }, 2000);\n  });\n};\n\nconst userPromise = fetchUserFromServer1('Mango');\nconsole.log('userPromise:', userPromise);\n\nfetchUserFromServer1('Mango') // результатом виклику fetchUserFromServer1(\"Mango\") буде проміс\n  .then(user => console.log(user)) // проміс обробляємо в методі then()\n  .catch(error => console.error(error)); // проміс обробляємо в методі catch()\n*/\n\n//Promise.resolve() і Promise.reject()\n\n/*\nnew Promise(resolve => resolve(\"success value\"))\n\t.then(value => console.log(value));\n\t.catch(error => console.log(error));\n*/\n\n// Promise.resolve('success value')\n//   .then(value => console.log(value))\n//   .catch(error => console.log(error));\n\n/*\nnew Promise((resolve, reject) => reject(\"error\"));\n\t.then(value => console.log(value));\n\t.catch(error => console.log(error));\n*/\n\n// Promise.reject('error')\n//   .then(value => console.log(value))\n//   .catch(error => console.log(error));\n\n//Промісифікація синхронних функцій\n\n/*\nconst makeGreeting = (guestName, onSuccess, onError) => {\n  if (!guestName) {\n    onError('Guest name must not be empty');\n  } else {\n    onSuccess(`Welcome ${guestName}`);\n  }\n};\n\nmakeGreeting(\n  'Mango',\n  greeting => console.log(greeting),\n  error => console.error(error)\n);\n*/\n\n//Зробимо промісифікацію функції makeGreeting =>\n\n/*\nconst makeGreeting = guestName => {\n  return new Promise((resolve, reject) => {\n    if (!guestName) {\n      reject('Guest name must not be empty');\n    } else {\n      resolve(`Welcome ${guestName}`);\n    }\n  });\n};\n\nmakeGreeting('Mango')\n  .then(greeting => console.log(greeting))\n  .catch(error => console.error(error));\n*/\n\n//використаємо методи класу Promise =>\n/*\nconst makeGreeting = guestName => {\n  if (!guestName) {\n    return Promise.reject('Guest name must not be empty');\n  } else {\n    return Promise.resolve(`Welcome ${guestName}`);\n  }\n};\n\nmakeGreeting('Mango')\n  .then(greeting => console.log(greeting))\n  .catch(error => console.error(error));\n*/\n\n// ********************************\nconsole.log('******************');\n\n//Створення промісів із затримкою\n\n/*\nconst makePromise = options => {\n  return new Promise((resolve, reject) => {\n    // ...\n  });\n};\n\nmakePromise({\n  value: 'Some value',\n  delay: 2000,\n  shouldResolve: true,\n});\n*/\n// =>\n\nconst makePromise = ({ value, delay, shouldResolve = true }) => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve(value);\n      } else {\n        reject(value);\n      }\n    }, delay);\n  });\n};\n\nmakePromise({ value: 'A', delay: 1000 })\n  .then(value => console.log(value)) // \"A\"\n  .catch(error => console.log(error));\n\nmakePromise({ value: 'B', delay: 3000 })\n  .then(value => console.log(value)) // \"B\"\n  .catch(error => console.log(error));\n\nmakePromise({ value: 'C', delay: 2000, shouldResolve: false })\n  .then(value => console.log(value))\n  .catch(error => console.log(error)); // \"C\"\n"],"names":["makePromise","value","delay","shouldResolve","resolve","reject","error"],"mappings":"oDA+BA,QAAQ,IAAI,iBAAiB,EAsG7B,QAAQ,IAAI,oBAAoB,EAmBhC,MAAMA,EAAc,CAAC,CAAE,MAAAC,EAAO,MAAAC,EAAO,cAAAC,EAAgB,EAAI,IAChD,IAAI,QAAQ,CAACC,EAASC,IAAW,CACtC,WAAW,IAAM,CACXF,EACFC,EAAQH,CAAK,EAEbI,EAAOJ,CAAK,CAEf,EAAEC,CAAK,CACZ,CAAG,EAGHF,EAAY,CAAE,MAAO,IAAK,MAAO,GAAI,CAAE,EACpC,KAAKC,GAAS,QAAQ,IAAIA,CAAK,CAAC,EAChC,MAAMK,GAAS,QAAQ,IAAIA,CAAK,CAAC,EAEpCN,EAAY,CAAE,MAAO,IAAK,MAAO,GAAI,CAAE,EACpC,KAAKC,GAAS,QAAQ,IAAIA,CAAK,CAAC,EAChC,MAAMK,GAAS,QAAQ,IAAIA,CAAK,CAAC,EAEpCN,EAAY,CAAE,MAAO,IAAK,MAAO,IAAM,cAAe,GAAO,EAC1D,KAAKC,GAAS,QAAQ,IAAIA,CAAK,CAAC,EAChC,MAAMK,GAAS,QAAQ,IAAIA,CAAK,CAAC"}