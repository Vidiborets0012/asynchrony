{"version":3,"file":"02_promisification.js","sources":["../src/js/02_promisification.js"],"sourcesContent":["/*\n * Промісифікація:\n * - Проблема доступу до результату проміса з колбеком\n * - Функція, яка повертає проміс\n */\n\n// const makeOrder = (dish, onSucces, onError) => {\n//   const random = Math.random();\n\n//   setTimeout(() => {\n//     if (random > 0.5) {\n//       onSucces(`Ваше замовлення: ${dish}`);\n//       return;\n//     }\n\n//     onError('Закінчилися продукти');\n//   }, 1000);\n// };\n\n// makeOrder(\n//   'пиріжок',\n//   str => {\n//     console.log('onSucces:', str);\n//   },\n//   err => {\n//     console.log('onError:', err);\n//   }\n// );\n\nconsole.log('*********************');\n\n// const makeOrder1 = dish => {\n//   return new Promise((resolve, reject) => {\n//     const random = Math.random();\n\n//     setTimeout(() => {\n//       if (random > 0.5) {\n//         resolve(`Ваше замовлення: ${dish}`);\n//       }\n\n//       reject('Закінчилися продукти');\n//     }, 1000);\n//   });\n// };\n\n// // console.log(makeOrder1()); //Promise {<pending>}\n\n// makeOrder1('пиріжок')\n//   .then(res => {\n//     console.log('then:', res);\n//   })\n//   .catch(error => {\n//     console.log('catch:', error);\n//   });\n\n/*\n * Промісифікація «синхронних» функцій\n * - Promise.resolve()\n * - Promise.reject()\n */\n\n// const makeOrder1 = dish => {\n//   const random = Math.random();\n\n//   if (random > 0.5) {\n//     return Promise.resolve(`Ваше замовлення: ${dish}`);\n//   }\n\n//   return Promise.reject('Закінчилися продукти');\n// };\n\n// makeOrder1('пиріжок')\n//   .then(res => {\n//     console.log('then:', res);\n//   })\n//   .catch(error => {\n//     console.log('catch:', error);\n//   });\n\nconsole.log('**************');\n\n// ************************************\n// Promise.all\n\nconst startTime = Date.now();\n\nconst res1 = () => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const currentTime = Date.now();\n      const deltaTime = currentTime - startTime;\n\n      resolve({ title: 'first', time: deltaTime });\n    }, 3000);\n  });\n};\n\nconst res2 = () => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const currentTime = Date.now();\n      const deltaTime = currentTime - startTime;\n\n      resolve({ title: 'second', time: deltaTime });\n    }, 1000);\n  });\n};\n\nconst res3 = () => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const currentTime = Date.now();\n      const deltaTime = currentTime - startTime;\n\n      resolve({ title: 'third', time: deltaTime });\n    }, 5000);\n  });\n};\n\n// res1()\n//   .then(data => {\n//     console.log(data);\n//   })\n//   .catch(error => {\n//     console.log(error);\n//   });\n\n// res2()\n//   .then(data => {\n//     console.log(data);\n//   })\n//   .catch(error => {\n//     console.log(error);\n//   });\n\n// res3()\n//   .then(data => {\n//     console.log(data);\n//   })\n//   .catch(error => {\n//     console.log(error);\n//   });\n\n// Promise.all([res1(), res2(), res3()])\n//   .then(data => {\n//     console.log(data);\n//   })\n//   .catch(error => {\n//     console.log(error);\n//   });\n\n// console.log([res1(), res2(), res3()]);\n\nconsole.log('**************');\n// Promise.race;\n\n// Promise.race([res1(), res2(), res3()])\n//   .then(data => {\n//     console.log('then:', data);\n//   })\n//   .catch(error => {\n//     console.log('catch:', error);\n//   });\n"],"names":[],"mappings":"oDA6BA,QAAQ,IAAI,uBAAuB,EAkDnC,QAAQ,IAAI,gBAAgB,EA0E5B,QAAQ,IAAI,gBAAgB"}